<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:visualizationToolkit="clr-namespace:System.Windows.Controls.DataVisualization.Charting;assembly=System.Windows.Controls.DataVisualization.Toolkit" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d"
    xmlns:local="clr-namespace:Gibbo.Editor.WPF"
    xmlns:po="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
    x:Class="Gibbo.Editor.WPF.DarkThemeResourceDictionary"
    xmlns:sw ="clr-namespace:System.Windows;assembly=PresentationFramework"
                x:ClassModifier="public">

    <!-- Image Sources -->
    <ImageSource x:Key="LogoImage">/Gibbo.Editor.WPF;component/Gibbo.Content/_logo_a.png</ImageSource>
    <ImageSource x:Key="CloseBtnImage">/Gibbo.Editor.WPF;component/Gibbo.Content/_x.png</ImageSource>
    <ImageSource x:Key="MaximizeBtnImage">/Gibbo.Editor.WPF;component/Gibbo.Content/_maximize_btn.png</ImageSource>
    <ImageSource x:Key="MinimizeBtnImage">/Gibbo.Editor.WPF;component/Gibbo.Content/_minimize.png</ImageSource>
    <ImageSource x:Key="LayerIcon">/Gibbo.Editor.WPF;component/Gibbo.Content/_layer.png</ImageSource>
    <ImageSource x:Key="GameObjectIcon_Empty">/Gibbo.Editor.WPF;component/Gibbo.Content/_game_object_empty.png</ImageSource>
    <ImageSource x:Key="GameObjectIcon_Sprite">/Gibbo.Editor.WPF;component/Gibbo.Content/_game_object_sprite.png</ImageSource>
    <ImageSource x:Key="GameObjectIcon_Audio">/Gibbo.Editor.WPF;component/Gibbo.Content/_game_object_audio.png</ImageSource>
    <ImageSource x:Key="GameObjectIcon_Tileset">/Gibbo.Editor.WPF;component/Gibbo.Content/_game_object_tileset.png</ImageSource>
    <ImageSource x:Key="GameObjectIcon_Particle">/Gibbo.Editor.WPF;component/Gibbo.Content/_game_object_particle.png</ImageSource>
    <ImageSource x:Key="GameObjectIcon_Text">/Gibbo.Editor.WPF;component/Gibbo.Content/_game_object_text.png</ImageSource>
    <ImageSource x:Key="VisibleItemIcon">/Gibbo.Editor.WPF;component/Gibbo.Content/_btn_toggle_on.png</ImageSource>
    <ImageSource x:Key="HiddenItemIcon">/Gibbo.Editor.WPF;component/Gibbo.Content/_btn_toggle_off.png</ImageSource>
    <ImageSource x:Key="FolderIcon">/Gibbo.Editor.WPF;component/Gibbo.Content/_folder.png</ImageSource>
    <ImageSource x:Key="FolderAddIcon">/Gibbo.Editor.WPF;component/Gibbo.Content/_folder_add.png</ImageSource>
    <ImageSource x:Key="FileIcon">/Gibbo.Editor.WPF;component/Gibbo.Content/_file.png</ImageSource>
    <ImageSource x:Key="CSFileIcon">/Gibbo.Editor.WPF;component/Gibbo.Content/_cs_file.png</ImageSource>
    <ImageSource x:Key="SceneIcon">/Gibbo.Editor.WPF;component/Gibbo.Content/_scene_file.png</ImageSource>
    <ImageSource x:Key="TextFileIcon">/Gibbo.Editor.WPF;component/Gibbo.Content/_text_file.png</ImageSource>
    <ImageSource x:Key="ImageIcon">/Gibbo.Editor.WPF;component/Gibbo.Content/_image.png</ImageSource>
    <ImageSource x:Key="SolutionIcon">/Gibbo.Editor.WPF;component/Gibbo.Content/_sln.png</ImageSource>
    <ImageSource x:Key="ComponentItemIcon">/Gibbo.Editor.WPF;component/Gibbo.Content/_component_item.png</ImageSource>
    <ImageSource x:Key="ComponentIcon">/Gibbo.Editor.WPF;component/Gibbo.Content/_component.png</ImageSource>
    <ImageSource x:Key="SaveIcon">/Gibbo.Editor.WPF;component/Gibbo.Content/_save.png</ImageSource>
    <ImageSource x:Key="CutIcon">/Gibbo.Editor.WPF;component/Gibbo.Content/_cut.png</ImageSource>
    <ImageSource x:Key="CopyIcon">/Gibbo.Editor.WPF;component/Gibbo.Content/_copy.png</ImageSource>
    <ImageSource x:Key="PasteIcon">/Gibbo.Editor.WPF;component/Gibbo.Content/_paste.png</ImageSource>
    <ImageSource x:Key="RenameIcon">/Gibbo.Editor.WPF;component/Gibbo.Content/_rename.png</ImageSource>
    <ImageSource x:Key="MoveUpIcon">/Gibbo.Editor.WPF;component/Gibbo.Content/_move_up.png</ImageSource>
    <ImageSource x:Key="MoveDownIcon">/Gibbo.Editor.WPF;component/Gibbo.Content/_move_down.png</ImageSource>

    <SolidColorBrush x:Key="ContextMenuBorderColor" Color="#1e1e1e" po:Freeze="True"/>
    <SolidColorBrush x:Key="NormalBrush" Color="#585858" po:Freeze="True"/>
    <SolidColorBrush x:Key="TitleBackgroundBrush" Color="#FF2D2D30" po:Freeze="True"/>
    <SolidColorBrush x:Key="VSTitleBrush" Color="#FF999999" po:Freeze="True"/>

    <LinearGradientBrush x:Key="HorizontalNormalBrush" StartPoint="0,0" EndPoint="1,0" >
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#CCC" Offset="1.0"/>
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="DeployToggledBrush" EndPoint="0,1" StartPoint="0,0">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#333333" Offset="0"/>
                <GradientStop Color="#3E3E3E" Offset="1"/>
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="LightBrush" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#EEE" Offset="1.0"/>
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HorizontalLightBrush" StartPoint="0,0" EndPoint="1,0">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#EEE" Offset="1.0"/>
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="DarkBrush" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#AAA" Offset="1.0"/>
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="PressedBrush" Color="Black" po:Freeze="True"/>

    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" po:Freeze="True" />

    <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE" po:Freeze="True"/>

    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FF282828" po:Freeze="True"/>

    <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="#DDD" po:Freeze="True"/>

    <!-- Border Brushes -->

    <LinearGradientBrush x:Key="NormalBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#CCC" Offset="0.0"/>
                <GradientStop Color="#444" Offset="1.0"/>
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HorizontalNormalBorderBrush" StartPoint="0,0" EndPoint="1,0">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#CCC" Offset="0.0"/>
                <GradientStop Color="#444" Offset="1.0"/>
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="DefaultedBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#777" Offset="0.0"/>
                <GradientStop Color="#000" Offset="1.0"/>
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PressedBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#444" Offset="0.0"/>
                <GradientStop Color="#888" Offset="1.0"/>
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA" po:Freeze="True"/>

    <SolidColorBrush x:Key="SolidBorderBrush" Color="#888" po:Freeze="True"/>

    <SolidColorBrush x:Key="LightBorderBrush" Color="#AAA" po:Freeze="True" />

    <!-- Miscellaneous Brushes -->
    <SolidColorBrush x:Key="GlyphBrush" Color="#FF7E7C7C" po:Freeze="True"/>

    <SolidColorBrush x:Key="GlyphMouseOver" Color="#FFE8E8E8" po:Freeze="True"/>

    <SolidColorBrush x:Key="LightColorBrush" Color="#DDD" po:Freeze="True"/>

    <SolidColorBrush x:Key="UnfocusedTextBackground" Color="#FF333337" po:Freeze="True"/>
    <SolidColorBrush x:Key="BorderDark" Color="#FF181818" po:Freeze="True"/>
    <SolidColorBrush x:Key="Border" Color="#FF292929" po:Freeze="True"/>
    <LinearGradientBrush x:Key="MenuBackground" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#F6F6F6" Offset="0.25"/>
        <GradientStop Color="#EAE8E8" Offset="0.25"/>
        <GradientStop Color="#DCD9D9" Offset="0.8"/>
        <GradientStop Color="White" Offset="1"/>
    </LinearGradientBrush>

    <ControlTemplate x:Key="TextBoxBaseControlTemplate" TargetType="{x:Type TextBoxBase}">
        <Border 
    		x:Name="Bd" BorderBrush="{DynamicResource BorderDark}"
    		BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0" Background="#232323">
            <ScrollViewer x:Name="PART_ContentHost" VerticalAlignment="Center"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource BorderDark}"/>
                <Setter Property="Background" TargetName="Bd" Value="#333"/>
            </Trigger>
            <Trigger Property="Width" Value="Auto">
                <Setter Property="MinWidth" Value="100"/>
            </Trigger>
            <Trigger Property="Height" Value="Auto">
                <Setter Property="MinHeight" Value="20"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <Style x:Key="TreeViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="GroupBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GroupBox">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Border 
                            Grid.Row="0" 
                            BorderThickness="0">
                                <ContentPresenter 
                                    Margin="4" 
                                    ContentSource="Header" 
                                    RecognizesAccessKey="True" />
                        </Border>
                        <Border 
                            Grid.Row="1" 
                            BorderBrush="#666" 
                            BorderThickness="1" 
                            CornerRadius="2" >
                                <ContentPresenter Margin="4" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>

    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="Transparent" Height="16" Padding="5,5,5,5" Width="16">
                        <Path x:Name="ExpandPath" Data="{StaticResource TreeArrow}" Fill="#FF989898" Stroke="#FF989898">
                            <Path.RenderTransform>
                                <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF989898"/>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="#FF989898"/>
                        </Trigger>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="RenderTransform" TargetName="ExpandPath">
                                <Setter.Value>
                                    <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="#FF989898"/>
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF989898"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!-- Global: Treeview Item -->
    <Style x:Key="IgniteTreeViewItem" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="1,1,0,1"/>
        <Setter Property="Foreground" Value="#BBB"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <ControlTemplate.Resources>
                        <local:LeftMarginMultiplierConverter Length="19" x:Key="lengthConverter" />
                    </ControlTemplate.Resources>
                    <StackPanel>
                        <Border Name="Bd"
                              Background="Transparent"
                              BorderBrush="{TemplateBinding BorderBrush}"
                              BorderThickness="{TemplateBinding BorderThickness}"
                              Padding="{TemplateBinding Padding}">
                            <Grid Margin="{Binding Converter={StaticResource lengthConverter}, RelativeSource={RelativeSource TemplatedParent}}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="19" />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <ToggleButton x:Name="Expander"
                                    Style="{StaticResource ExpandCollapseToggleStyle}"
                                    IsChecked="{Binding Path=IsExpanded,
                                    RelativeSource={RelativeSource TemplatedParent}}"
                                    ClickMode="Press"/>
                                <ContentPresenter x:Name="PART_Header"
                                    Grid.Column="1"
                                    ContentSource="Header"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                            </Grid>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="local:TreeViewExtension.IsSelected" Value="true" >
                            <Setter Property="Background" TargetName="Bd">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Offset="0" Color="#555"></GradientStop>
                                        <GradientStop Offset="1" Color="#555"></GradientStop>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="Bd">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Offset="0" Color="#555"></GradientStop>
                                        <GradientStop Offset="1" Color="#555"></GradientStop>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <!--<Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ExpandCollapseToggleStyle}"/>
                        <Border x:Name="Bd" BorderThickness="0,1,0,0" Background="{TemplateBinding Background}" Grid.Column="1" Padding="4,1,4,1" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Grid.ColumnSpan="2" Grid.Column="1" Grid.Row="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="#555"/>
                            <Setter Property="CornerRadius" TargetName="Bd" Value="3"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="#777"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="SimpleMenuItem" TargetType="{x:Type MenuItem}">
        <Border Name="Border" Padding="1,2,1,2" Margin="0,0,0,0" ClipToBounds="True">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="13"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter Name="Icon"
                    Margin="6,0,6,0"
                    VerticalAlignment="Center"
                    ContentSource="Icon"/>
                <Border 
                    Name="Check"  
                    Width="13" Height="13" 
                    Visibility="Collapsed"
                    Margin="6,0,6,0" 
                    Background="{StaticResource NormalBrush}"
                    BorderThickness="1"
                    BorderBrush="#111">
                    <Path 
                        Name="CheckMark"
                        Width="7" Height="7" 
                        Visibility="Hidden" 
                        SnapsToDevicePixels="False" 
                        Stroke="{StaticResource GlyphBrush}"
                        StrokeThickness="2"
                        Data="M 0 0 L 7 7 M 0 7 L 7 0" />
                </Border>
                <TextBox Grid.Column="1" Height="14" Style="{DynamicResource IgniteLayoutTextBox}" PreviewKeyDown="LayoutTextBox_PreviewKeyDown"  Loaded="LayoutTextBox_Loaded"/>
                <TextBlock x:Name="InputGestureText"
                    Grid.Column="2"
                    Text="{TemplateBinding InputGestureText}"
                    Margin="0,0,0,0"
                    VerticalAlignment="Center"
                    DockPanel.Dock="Right" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsCheckable" Value="true">
                <Setter TargetName="Check" Property="Visibility" Value="Visible"/>
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="IgniteLayoutTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="SnapsToDevicePixels"
          Value="True" />
        <Setter Property="OverridesDefaultStyle"
          Value="True" />
        <Setter Property="KeyboardNavigation.TabNavigation"
          Value="None" />
        <Setter Property="FocusVisualStyle"
          Value="{x:Null}" />
        <Setter Property="MinWidth"
          Value="120" />
        <Setter Property="MinHeight"
          Value="20" />
        <Setter Property="AllowDrop"
          Value="true" />
        <Setter Property="Margin" Value="0, 5, 0, 5" />
        <Setter Property="CaretBrush" Value="#e6e6e6"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="18"/>
                            <ColumnDefinition Width="18"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="18"/>
                        </Grid.ColumnDefinitions>
                        <Border Name="Border" Grid.Column="2"
                            Padding="2"
                            BorderThickness="1" BorderBrush="#565656" Background="#4c4c4c">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <ScrollViewer Margin="0" x:Name="PART_ContentHost" />
                        </Border>
                        <Border Grid.Column="3" BorderThickness="0, 0, 1, 0" BorderBrush="#565656">
                            <ComboBox PreviewMouseDown="LayoutsPreviewMouseDown" SelectionChanged="Layouts_SelectionChanged" Style="{DynamicResource LayoutComboBox}" />
                        </Border>
                        <Border Grid.Column="0" BorderThickness="1" BorderBrush="#565656">
                            <TextBlock MouseUp="addLayoutMouseDown" FontWeight="Bold" FontSize="18" Background="#4c4c4c" VerticalAlignment="Center" TextAlignment="Center" Foreground="#C7C7C7">+</TextBlock>
                        </Border>
                        <Border Grid.Column="1" BorderThickness="1" BorderBrush="#565656">
                            <TextBlock MouseUp="removeLayoutMouseDown" FontWeight="Bold" FontSize="18" Background="#4c4c4c" VerticalAlignment="Center" TextAlignment="Center" Foreground="#C7C7C7">-</TextBlock>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="IgniteTagTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="SnapsToDevicePixels"
          Value="True" />
        <Setter Property="OverridesDefaultStyle"
          Value="True" />
        <Setter Property="KeyboardNavigation.TabNavigation"
          Value="None" />
        <Setter Property="FocusVisualStyle"
          Value="{x:Null}" />
        <Setter Property="MinWidth"
          Value="120" />
        <Setter Property="MinHeight"
          Value="20" />
        <Setter Property="AllowDrop"
          Value="true" />
        <Setter Property="CaretBrush" Value="#e6e6e6"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="18"/>
                        </Grid.ColumnDefinitions>
                        <Border Name="Border" Grid.Column="0"
                            Padding="2"
                            BorderThickness="1" BorderBrush="#565656" Background="#4c4c4c">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <ScrollViewer Margin="0" x:Name="PART_ContentHost" />
                        </Border>
                        <Border Grid.Column="1" BorderThickness="0,0,1,0" BorderBrush="#565656" >
                            <ComboBox Style="{DynamicResource TagComboBox}" PreviewMouseDown="TagPreviewMouseDown" SelectionChanged="TagItemChanged" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#FF7EB4EA" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#FF569DE5" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="IgnitePathTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="SnapsToDevicePixels"
          Value="True" />
        <Setter Property="OverridesDefaultStyle"
          Value="True" />
        <Setter Property="KeyboardNavigation.TabNavigation"
          Value="None" />
        <Setter Property="FocusVisualStyle"
          Value="{x:Null}" />
        <Setter Property="MinWidth"
          Value="120" />
        <Setter Property="MinHeight"
          Value="20" />
        <Setter Property="AllowDrop"
          Value="true" />
        <Setter Property="CaretBrush" Value="#e6e6e6"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="18"/>
                        </Grid.ColumnDefinitions>
                        <Border Name="Border"
                            Padding="2"
                            BorderThickness="1" BorderBrush="#565656" Background="#4c4c4c">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <ScrollViewer Margin="0" x:Name="PART_ContentHost" />
                        </Border>
                        <Border Grid.Column="1" BorderThickness="1" BorderBrush="#565656">
                            <TextBlock MouseUp="PathMouseDown" FontSize="15" Background="#4c4c4c" VerticalAlignment="Center" TextAlignment="Center" Foreground="#C7C7C7">...</TextBlock>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#FF7EB4EA" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#FF569DE5" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="IgniteGlobalPath" TargetType="{x:Type TextBox}">
        <Setter Property="SnapsToDevicePixels"
          Value="True" />
        <Setter Property="OverridesDefaultStyle"
          Value="True" />
        <Setter Property="KeyboardNavigation.TabNavigation"
          Value="None" />
        <Setter Property="FocusVisualStyle"
          Value="{x:Null}" />
        <Setter Property="MinWidth"
          Value="120" />
        <Setter Property="MinHeight"
          Value="20" />
        <Setter Property="AllowDrop"
          Value="true" />
        <Setter Property="CaretBrush" Value="#e6e6e6"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="18"/>
                        </Grid.ColumnDefinitions>
                        <Border Name="Border"
                            Padding="2"
                            BorderThickness="1" BorderBrush="#565656" Background="#4c4c4c">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <ScrollViewer Margin="0" x:Name="PART_ContentHost" />
                        </Border>
                        <Border Grid.Column="1" BorderThickness="1" BorderBrush="#565656">
                            <TextBlock MouseUp="GlobalPathMouseDown" FontSize="15" Background="#4c4c4c" VerticalAlignment="Center" TextAlignment="Center" Foreground="#C7C7C7">...</TextBlock>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#FF7EB4EA" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#FF569DE5" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="IgniteTexturePathTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="SnapsToDevicePixels"
          Value="True" />
        <Setter Property="OverridesDefaultStyle"
          Value="True" />
        <Setter Property="KeyboardNavigation.TabNavigation"
          Value="None" />
        <Setter Property="FocusVisualStyle"
          Value="{x:Null}" />
        <Setter Property="MinWidth"
          Value="120" />
        <Setter Property="MinHeight"
          Value="20" />
        <Setter Property="AllowDrop"
          Value="true" />
        <Setter Property="CaretBrush" Value="#e6e6e6"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="18"/>
                        </Grid.ColumnDefinitions>
                        <Border Name="Border"
                            Padding="2"
                            BorderThickness="1" BorderBrush="#565656" Background="#4c4c4c">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <ScrollViewer Margin="0" x:Name="PART_ContentHost" />
                        </Border>
                        <Border Grid.Column="1" BorderThickness="1" BorderBrush="#565656">
                            <TextBlock MouseUp="TexturePathMouseDown" FontSize="15" Background="#4c4c4c" VerticalAlignment="Center" TextAlignment="Center" Foreground="#C7C7C7">...</TextBlock>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#FF7EB4EA" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#FF569DE5" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="IgniteFntPathTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="SnapsToDevicePixels"
          Value="True" />
        <Setter Property="OverridesDefaultStyle"
          Value="True" />
        <Setter Property="KeyboardNavigation.TabNavigation"
          Value="None" />
        <Setter Property="FocusVisualStyle"
          Value="{x:Null}" />
        <Setter Property="MinWidth"
          Value="120" />
        <Setter Property="MinHeight"
          Value="20" />
        <Setter Property="AllowDrop"
          Value="true" />
        <Setter Property="CaretBrush" Value="#e6e6e6"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="18"/>
                        </Grid.ColumnDefinitions>
                        <Border Name="Border"
                            Padding="2"
                            BorderThickness="1" BorderBrush="#565656" Background="#4c4c4c">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <ScrollViewer Margin="0" x:Name="PART_ContentHost" />
                        </Border>
                        <Border Grid.Column="1" BorderThickness="1" BorderBrush="#565656">
                            <TextBlock MouseUp="FntPathMouseDown" FontSize="15" Background="#4c4c4c" VerticalAlignment="Center" TextAlignment="Center" Foreground="#C7C7C7">...</TextBlock>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#FF7EB4EA" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#FF569DE5" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="IgniteAudioPathTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="SnapsToDevicePixels"
          Value="True" />
        <Setter Property="OverridesDefaultStyle"
          Value="True" />
        <Setter Property="KeyboardNavigation.TabNavigation"
          Value="None" />
        <Setter Property="FocusVisualStyle"
          Value="{x:Null}" />
        <Setter Property="MinWidth"
          Value="120" />
        <Setter Property="MinHeight"
          Value="20" />
        <Setter Property="AllowDrop"
          Value="true" />
        <Setter Property="CaretBrush" Value="#e6e6e6"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="18"/>
                        </Grid.ColumnDefinitions>
                        <Border Name="Border"
                            Padding="2"
                            BorderThickness="1" BorderBrush="#565656" Background="#4c4c4c">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Normal" />
                                    <VisualState x:Name="MouseOver" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <ScrollViewer Margin="0" x:Name="PART_ContentHost" />
                        </Border>
                        <Border Grid.Column="1" BorderThickness="1" BorderBrush="#565656">
                            <TextBlock MouseUp="AudioPathMouseDown" FontSize="15" Background="#4c4c4c" VerticalAlignment="Center" TextAlignment="Center" Foreground="#C7C7C7">...</TextBlock>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#FF7EB4EA" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="#FF569DE5" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Multiselection: Treeview Item -->
    <Style x:Key="IgniteMultiTreeViewItem" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="1,1,0,1"/>
        <Setter Property="Foreground" Value="#BBB"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <ControlTemplate.Resources>
                        <local:LeftMarginMultiplierConverter Length="19" x:Key="lengthConverter" />
                    </ControlTemplate.Resources>
                    <StackPanel>
                        <Border Name="Bd"
                              Background="Transparent"
                              BorderBrush="{TemplateBinding BorderBrush}"
                              BorderThickness="{TemplateBinding BorderThickness}"
                              Padding="{TemplateBinding Padding}">
                            <Grid Margin="{Binding Converter={StaticResource lengthConverter}, RelativeSource={RelativeSource TemplatedParent}}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="19" />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <ToggleButton x:Name="Expander"
                                    Style="{StaticResource ExpandCollapseToggleStyle}"
                                    IsChecked="{Binding Path=IsExpanded,
                                    RelativeSource={RelativeSource TemplatedParent}}"
                                    ClickMode="Press"/>
                                <ContentPresenter x:Name="PART_Header"
                                    Grid.Column="1"
                                    ContentSource="Header"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                            </Grid>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="local:TreeViewExtension.IsSelected" Value="true" >
                            <Setter Property="Background" TargetName="Bd">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Offset="0" Color="#555"></GradientStop>
                                        <GradientStop Offset="1" Color="#555"></GradientStop>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                        </Trigger>
                         <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>                  
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <SolidColorBrush x:Key="CheckBoxFillNormal" Color="#F4F4F4" po:Freeze="True"/>
    <SolidColorBrush x:Key="CheckBoxStroke" Color="#8E8F8F" po:Freeze="True"/>
    <Style x:Key="EmptyCheckBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="1" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Scrollbar -->
    
    <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border 
                    x:Name="Border"
                    Margin="1" 
                    CornerRadius="0" 
                    Background="{StaticResource NormalBrush}"
                    BorderBrush="{StaticResource NormalBrush}"
                    BorderThickness="1">
                        <Path
                    x:Name="glyph"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Fill="{StaticResource GlyphBrush}"
                    Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="glyph" Property="Fill" Value="{StaticResource GlyphMouseOver}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="glyph" Property="Fill" Value="{StaticResource PressedBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Rectangle
						x:Name="rectThumb"
						RadiusX="4"
						RadiusY="4" 

						Fill="#777"
						/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="rectThumb" Property="Fill" Value="#888888"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="true">
                            <Setter TargetName="rectThumb" Property="Fill" Value="#333"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid >
            <Grid.RowDefinitions>
                <RowDefinition MaxHeight="18"/>
                <RowDefinition Height="0.0001*"/>
                <RowDefinition MaxHeight="18"/>
            </Grid.RowDefinitions>
            <Border
				Grid.RowSpan="3"
				CornerRadius="0" 
				Background="{StaticResource NormalBrush}" BorderBrush="{DynamicResource Border}" />
            <RepeatButton 
				Grid.Row="0" 
				Style="{StaticResource ScrollBarLineButton}"
				Height="18"
				Command="ScrollBar.LineUpCommand"
				Content="M 0 8 L 8 8 L 4 0 Z" />
            <Track 
				x:Name="PART_Track"
				Grid.Row="1"
				IsDirectionReversed="true"
				>
                <Track.DecreaseRepeatButton>
                    <RepeatButton 
						Style="{StaticResource ScrollBarPageButton}"
						Command="ScrollBar.PageUpCommand" />
                </Track.DecreaseRepeatButton>

                <Track.Thumb>
                    <Thumb 
					Style="{StaticResource ScrollBarThumb}" 
					Margin="5,0,5,0"
					Background="{StaticResource GlyphBrush}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton 
					Style="{StaticResource ScrollBarPageButton}"
					Command="ScrollBar.PageDownCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton 
					Grid.Row="3" 
					Style="{StaticResource ScrollBarLineButton}"
					Height="18"
					Command="ScrollBar.LineDownCommand"
					Content="M 0 0 L 4 8 L 8 0 Z"/>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid >
            <Grid.ColumnDefinitions>
                <ColumnDefinition MaxWidth="18"/>
                <ColumnDefinition Width="0.00001*"/>
                <ColumnDefinition MaxWidth="18"/>
            </Grid.ColumnDefinitions>
            <Border
				Grid.ColumnSpan="3"
				CornerRadius="0" 
				Background="{StaticResource NormalBrush}" />
            <RepeatButton 
				Grid.Column="0" 
				Style="{StaticResource ScrollBarLineButton}"
				Width="18"
				Command="ScrollBar.LineLeftCommand"
				Content="M 8 0 L 8 8 L 0 4 Z" />
            <Track 
				x:Name="PART_Track"
				Grid.Column="1"
				IsDirectionReversed="False">
                <Track.DecreaseRepeatButton>
                    <RepeatButton 
				Style="{StaticResource ScrollBarPageButton}"
				Command="ScrollBar.PageLeftCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb 
					Style="{StaticResource ScrollBarThumb}" 
					Margin="0,5,0,5" 
					Background="{StaticResource GlyphBrush}"
					BorderBrush="{StaticResource NormalBorderBrush}" />
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton 
					Style="{StaticResource ScrollBarPageButton}"
					Command="ScrollBar.PageRightCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton 
					Grid.Column="3" 
					Style="{StaticResource ScrollBarLineButton}"
					Width="18"
					Command="ScrollBar.LineRightCommand"
					Content="M 0 0 L 8 4 L 0 8 Z"/>
        </Grid>
    </ControlTemplate>

    <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Background" Value="Transparent"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="Height" Value="18" />
                <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="18"/>
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonNormalBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{DynamicResource BorderDark}" BorderThickness="1" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Background="{DynamicResource GradientBrush1}" Cursor="Hand" CornerRadius="0">
                        <Label Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Foreground="{DynamicResource ForegroundGray}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsKeyboardFocused" Value="true"/>
                        <Trigger Property="ToggleButton.IsChecked" Value="true"/>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource GradientBrush1_Highlight}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="GridSplitterStyle" TargetType="{x:Type GridSplitter}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
        <Setter Property="PreviewStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Fill="#80000000"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridSplitter}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{DynamicResource BackgroundBrush}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TabItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="3,3,3,1" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="GradientBrush1_Press" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF5D5D5D" Offset="0"/>
        <GradientStop Color="#FF4B4B4B" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="GradientBrush1_Highlight" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF383838" Offset="0"/>
        <GradientStop Color="#FF212121" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="BackgroundBrush" Color="#FF282828" po:Freeze="True"/>
    <LinearGradientBrush x:Key="ButtonNormalBackground" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#F3F3F3" Offset="0"/>
        <GradientStop Color="#EBEBEB" Offset="0.5"/>
        <GradientStop Color="#DDDDDD" Offset="0.5"/>
        <GradientStop Color="#CDCDCD" Offset="1"/>
    </LinearGradientBrush>
    <!-- Resource dictionary entries should be defined here. -->
    <SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF707070"/>
    <Style x:Key="ButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="GradientBrush1" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF444444" Offset="0"/>
        <GradientStop Color="#FF333333" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ForegroundGray" Color="#FFC7C7C7" po:Freeze="True"/>
    <SolidColorBrush x:Key="TabItemSelectedBackground" Color="#F9F9F9" po:Freeze="True"/>
    <SolidColorBrush x:Key="PanelBackground" Color="#FF383838" po:Freeze="True"/>
    <SolidColorBrush x:Key="BorderSimple" Color="#FF3F3F3F" po:Freeze="True"/>
    <!-- Tab item -->
    <Style x:Key="TabItemStyle" TargetType="{x:Type TabItem}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource TabItemFocusVisual}"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Padding" Value="6,1,6,1"/>
        <Setter Property="BorderBrush" Value="#8C8E94"/>
        <Setter Property="Background" Value="{StaticResource ButtonNormalBackground}"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid SnapsToDevicePixels="true" Margin="0,0,0,0">
                        <Border x:Name="Bd" BorderThickness="1,1,1,0" Padding="10,1" CornerRadius="4,4,0,0" Margin="0">
                            <ContentPresenter x:Name="Content" ContentSource="Header" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" Margin="0,-2,0,1"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{DynamicResource GradientBrush1_Highlight}"/>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource GradientBrush1_Highlight}"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Background" Value="{DynamicResource PanelBackground}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource BorderDark}"/>
                            <Setter Property="Background" TargetName="Bd">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#FF474747" Offset="0"/>
                                        <GradientStop Color="#FF383838" Offset="1"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <!--<Setter Property="BorderThickness" TargetName="Bd" Value="0,1,0,0"></Setter>-->
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="BorderThickness" TargetName="Bd" Value="1,0,1,1"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="BorderThickness" TargetName="Bd" Value="1,1,0,1"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="BorderThickness" TargetName="Bd" Value="0,1,1,1"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="TabStripPlacement" Value="Top"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Margin" Value="-2,-2,-2,-1"/>
                            <Setter Property="Margin" TargetName="Content" Value="0,0,0,2"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="TabStripPlacement" Value="Bottom"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Margin" Value="-2,-1,-2,-2"/>
                            <Setter Property="Margin" TargetName="Content" Value="0,1,0,0"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="TabStripPlacement" Value="Left"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Margin" Value="-2,-2,-1,-2"/>
                            <Setter Property="Margin" TargetName="Content" Value="0,0,1,0"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="TabStripPlacement" Value="Right"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Margin" Value="-1,-2,-2,-2"/>
                            <Setter Property="Margin" TargetName="Content" Value="1,0,0,0"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MenuStyle" TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{StaticResource MenuBackground}"/>
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}"/>
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}"/>
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true" CornerRadius="0" Margin="0" BorderThickness="0,0,0,1" BorderBrush="#181818">
                        <Border.Background>
                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                <GradientStop Color="#444" Offset="0"/>
                                <GradientStop Color="#343434" Offset="1"/>
                            </LinearGradientBrush>
                        </Border.Background>
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <ItemsPresenter.OpacityMask>
                                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                    <GradientStop Color="Black" Offset="0"/>
                                    <GradientStop Color="#FFBD6060" Offset="1"/>
                                </LinearGradientBrush>
                            </ItemsPresenter.OpacityMask>
                        </ItemsPresenter>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ButtonStyle2" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource GradientBrush1}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Border}"/>
    </Style>
    <SolidColorBrush x:Key="ListBorder" Color="#828790" po:Freeze="True"/>
    <Style x:Key="ListBoxStyle" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ListBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border x:Name="Bd" BorderBrush="{DynamicResource BorderDark}" BorderThickness="{TemplateBinding BorderThickness}" Background="#FF383838" Padding="0,4" SnapsToDevicePixels="true" CornerRadius="0">
                        <ScrollViewer Focusable="false" Padding="{TemplateBinding Padding}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="GradientBrushItem" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF787878" Offset="0"/>
        <GradientStop Color="#FF545454" Offset="0.97"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="GradientBrushBlue" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FF545454" Offset="0"/>
        <GradientStop Color="#FF545454" Offset="1"/>
    </LinearGradientBrush>
    <Style TargetType="{x:Type ListBoxItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="4,2,4,2"/>
        <Setter Property="Foreground" Value="#CCC"/>
        <Setter Property="BorderThickness" Value="0,1,0,1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd" BorderThickness="0,1,0,1" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Foreground" Value="#CCC"/>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource GradientBrushBlue}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="#FF373737"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="Selector.IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>-->
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource GradientBrushBlue}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="WindowTemplateKey" TargetType="{x:Type Window}">
        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
            <Grid>
                <AdornerDecorator>
                    <ContentPresenter/>
                </AdornerDecorator>
                <ResizeGrip x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed" VerticalAlignment="Bottom"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                    <Condition Property="WindowState" Value="Normal"/>
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="titleBtnStyle" TargetType="Button">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="Border"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        Background="#3e3e3e">
                        <ContentPresenter 
                            Margin="2"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            RecognizesAccessKey="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="#FF505050" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="#FF3D3D3D" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}" />
                            <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DarkWindowStyle" TargetType="{x:Type Window}">
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="AllowsTransparency" Value="True"/>
        <Setter Property="ResizeMode" Value="NoResize"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}"/>
        
        <EventSetter Event="MouseLeftButtonDown"
                 Handler="grid_mouseLeftButtonDown"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Grid Name="grid" >
                        <Grid.DataContext>
                            <local:ButtonVisibilityViewModel />
                        </Grid.DataContext>
                        <DockPanel DataContext="{Binding Path=ButtonVisibility, Mode=TwoWay}" x:Name="TitleBar" Panel.ZIndex="1" LastChildFill="true" HorizontalAlignment="Stretch" Height="30" VerticalAlignment="Top" Width="Auto">
                            <Image DockPanel.Dock="Left" Source="{DynamicResource LogoImage}" Margin="7, 0, 0, 0" VerticalAlignment="Center" Width="18" Height="18"/>
                            <Button Name="btnClose" Style="{DynamicResource titleBtnStyle}" BorderThickness="1,0,1,1" BorderBrush="#222" DockPanel.Dock="Right" Margin="0,-8,8,0"  Width="32" Height="18" Click="btnClose_Click">
                                <Image Width="16" Height="12" Stretch="None" Source="{DynamicResource CloseBtnImage}"></Image>
                            </Button>
                            <Button Name="btnMaximize" Visibility="{Binding Path=MaximizeVisibility, PresentationTraceSources.TraceLevel=High}" Style="{DynamicResource titleBtnStyle}" BorderThickness="0,0,0,1" BorderBrush="#222" DockPanel.Dock="Right" Margin="0,-8,0,0"  Width="32" Height="18" Click="btnMaximize_Click">
                                <Image Width="16" Height="12" Stretch="None" Source="{DynamicResource MaximizeBtnImage}"></Image>
                            </Button>
                            <Button Name="btnMinimize" Visibility="{Binding Path=MaximizeVisibility, PresentationTraceSources.TraceLevel=High}" Style="{DynamicResource titleBtnStyle}" BorderThickness="1,0,1,1" BorderBrush="#222"  DockPanel.Dock="Right" Margin="0,-8,0,0"  Width="32" Height="18" Click="btnMinimize_Click">
                                <Image Width="16" Height="12"  Stretch="None" Source="{DynamicResource MinimizeBtnImage}"></Image>
                            </Button>
                            <Label DockPanel.Dock="Left" Content="{TemplateBinding Title}"   MouseDown="titleBarMouseDown"
                                   Height="Auto"
                                   Padding="7, 0, 0, 0"
                                   Foreground="#FF999999" 
                                   VerticalAlignment="Center"
                                   FontSize="14"/>
                        </DockPanel>
                        <Border BorderThickness="1,1,1,1"  Background="#FF1D1D1D">
                            <Border x:Name="Border_Window" Margin="1" Background="#FF1D1D1D" BorderBrush="#3e3e3e" BorderThickness="6, 25, 6, 6" CornerRadius="0">
                                <Border BorderThickness="1, 1, 1, 1" Background="#FF292929">
                                    <AdornerDecorator>
                                        <ContentPresenter/>
                                    </AdornerDecorator>
                                </Border>
                            </Border>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="ResizeMode" Value="CanResizeWithGrip">
                <Setter Property="Template" Value="{StaticResource WindowTemplateKey}"/>
            </Trigger>
            <!--<Trigger Property="WindowState" Value="Maximized">
                <Setter Property="BorderThickness" TargetName="Border_Window" Value="0, 25, 0, 0"/>
            </Trigger>-->
            <!--<Trigger Property="ResizeMode" Value="NoResize">
                <Setter TargetName="btnClose" Property="Visibility" Value="Collapsed"/>
            </Trigger>-->
        </Style.Triggers>
    </Style>

    <BooleanToVisibilityConverter x:Key="BoolToVisibility" />
    
    <LinearGradientBrush x:Key="ProgressBarBackground" EndPoint="1,0" StartPoint="0,0">
        <GradientStop Color="#BABABA" Offset="0"/>
        <GradientStop Color="#C7C7C7" Offset="0.5"/>
        <GradientStop Color="#BABABA" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ProgressBarBorderBrush" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#B2B2B2" Offset="0"/>
        <GradientStop Color="#8C8C8C" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ProgressBarGlassyHighlight" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#50FFFFFF" Offset="0.5385"/>
        <GradientStop Color="#00FFFFFF" Offset="0.5385"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ProgressBarTopHighlight" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#80FFFFFF" Offset="0.05"/>
        <GradientStop Color="#00FFFFFF" Offset="0.25"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill" EndPoint="1,0" StartPoint="0,0">
        <GradientStop Color="#00FFFFFF" Offset="0"/>
        <GradientStop Color="#60FFFFFF" Offset="0.4"/>
        <GradientStop Color="#60FFFFFF" Offset="0.6"/>
        <GradientStop Color="#00FFFFFF" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ProgressBarIndicatorDarkEdgeLeft" EndPoint="1,0" StartPoint="0,0">
        <GradientStop Color="#0C000000" Offset="0"/>
        <GradientStop Color="#20000000" Offset="0.3"/>
        <GradientStop Color="#00000000" Offset="1"/>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="ProgressBarIndicatorDarkEdgeRight" EndPoint="1,0" StartPoint="0,0">
        <GradientStop Color="#00000000" Offset="0"/>
        <GradientStop Color="#20000000" Offset="0.7"/>
        <GradientStop Color="#0C000000" Offset="1"/>
    </LinearGradientBrush>
    <RadialGradientBrush x:Key="ProgressBarIndicatorLightingEffectLeft" RadiusY="1" RadiusX="1" RelativeTransform="1,0,0,1,0.5,0.5">
        <GradientStop Color="#60FFFFC4" Offset="0"/>
        <GradientStop Color="#00FFFFC4" Offset="1"/>
    </RadialGradientBrush>
    <LinearGradientBrush x:Key="ProgressBarIndicatorLightingEffect" EndPoint="0,0" StartPoint="0,1">
        <GradientStop Color="#60FFFFC4" Offset="0"/>
        <GradientStop Color="#00FFFFC4" Offset="1"/>
    </LinearGradientBrush>
    <RadialGradientBrush x:Key="ProgressBarIndicatorLightingEffectRight" RadiusY="1" RadiusX="1" RelativeTransform="1,0,0,1,-0.5,0.5">
        <GradientStop Color="#60FFFFC4" Offset="0"/>
        <GradientStop Color="#00FFFFC4" Offset="1"/>
    </RadialGradientBrush>
    <LinearGradientBrush x:Key="ProgressBarIndicatorGlassyHighlight" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#90FFFFFF" Offset="0.5385"/>
        <GradientStop Color="#00FFFFFF" Offset="0.5385"/>
    </LinearGradientBrush>
    <Style x:Key="DarkProgressBarStyle" TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground" Value="#01D328"/>
        <Setter Property="Background" Value="{StaticResource ProgressBarBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ProgressBarBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="TemplateRoot" SnapsToDevicePixels="true">
                        <Rectangle RadiusY="2" RadiusX="2" Fill="#FF364252"/>
                        <Border Background="{DynamicResource BackgroundBrush}" CornerRadius="2" Margin="1"/>
                        <Border BorderBrush="#80565050" BorderThickness="1,0,1,1" Margin="1">
                            <Border.Background>
                                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                    <GradientStop Color="#80414141" Offset="0.052"/>
                                    <GradientStop Color="#00373737" Offset="0.25"/>
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>
                        <Rectangle x:Name="PART_Track" Margin="1"/>
                        <Decorator x:Name="PART_Indicator" HorizontalAlignment="Left" Margin="1">
                            <Grid x:Name="Foreground">
                                <Rectangle x:Name="Indicator" Fill="#FF83827E"/>
                                <Grid x:Name="Animation" ClipToBounds="true">
                                    <Rectangle x:Name="PART_GlowRect" Fill="{StaticResource ProgressBarIndicatorAnimatedFill}" HorizontalAlignment="Left" Margin="-100,0,0,0" Width="100"/>
                                </Grid>
                                <Grid x:Name="Overlay">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition MaxWidth="15"/>
                                        <ColumnDefinition Width="0.1*"/>
                                        <ColumnDefinition MaxWidth="15"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                    </Grid.RowDefinitions>
                                    <Rectangle x:Name="LeftDark" Fill="Black" Margin="1,1,0,1" RadiusY="1" RadiusX="1" Grid.RowSpan="2"/>
                                    <Rectangle x:Name="RightDark" Grid.Column="2" Fill="{DynamicResource ButtonNormalBackground}" Margin="0,1,1,1" RadiusY="1" RadiusX="1" Grid.RowSpan="2"/>
                                    <Rectangle x:Name="LeftLight" Grid.Column="0" Fill="{DynamicResource ButtonNormalBackground}" Grid.Row="2"/>
                                    <Rectangle x:Name="CenterLight" Grid.Column="1" Fill="{DynamicResource DarkBrush}" Grid.Row="2"/>
                                    <Rectangle x:Name="RightLight" Grid.Column="2" Fill="{DynamicResource DarkBrush}" Grid.Row="2"/>
                                    <Border x:Name="Highlight1" Background="#FFE0E0E0" Grid.ColumnSpan="3" Grid.RowSpan="2"/>
                                    <Border x:Name="Highlight2" Grid.ColumnSpan="3" Grid.RowSpan="2">
                                        <Border.Background>
                                            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                                <GradientStop Color="#FFC2C2C2" Offset="0"/>
                                                <GradientStop Color="#FF7E7E7E" Offset="1"/>
                                            </LinearGradientBrush>
                                        </Border.Background>
                                    </Border>
                                </Grid>
                            </Grid>
                        </Decorator>
                        <Border BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="2" BorderBrush="#FF545454"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="true">
                            <Setter Property="Visibility" TargetName="LeftDark" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="RightDark" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="LeftLight" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="CenterLight" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="RightLight" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="false">
                            <Setter Property="Background" TargetName="Animation" Value="#80B5FFA9"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RoundedButtonStyle" TargetType="{x:Type local:RoundedButton}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True" StrokeThickness="1" StrokeDashArray="1 2"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                    <GradientStop Color="#FFF3F3F3" Offset="0"/>
                    <GradientStop Color="#FFEBEBEB" Offset="0.5"/>
                    <GradientStop Color="#FFDDDDDD" Offset="0.5"/>
                    <GradientStop Color="#FFCDCDCD" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="#FF707070"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:RoundedButton}">
                    <Grid>
                        <Border x:Name="border" BorderBrush="{DynamicResource BorderDark}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" Background="{DynamicResource GradientBrush1}" >
                            <Border  CornerRadius="{TemplateBinding CornerRadius}" BorderThickness="0,1,0,0" BorderBrush="{DynamicResource TopBorderBrushLight}">
                                <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource GradientBrush1_Highlight}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True"/>
                        <Trigger Property="ToggleButton.IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource GradientBrush1_Highlight}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#FFADADAD"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="RoundedButtonStyleToggle" TargetType="{x:Type local:RoundedButtonToggle}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True" StrokeThickness="1" StrokeDashArray="1 2"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                    <GradientStop Color="#FFF3F3F3" Offset="0"/>
                    <GradientStop Color="#FFEBEBEB" Offset="0.5"/>
                    <GradientStop Color="#FFDDDDDD" Offset="0.5"/>
                    <GradientStop Color="#FFCDCDCD" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="#FF707070"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:RoundedButtonToggle}">
                    <Grid>
                        <Border x:Name="border" BorderBrush="{DynamicResource BorderDark}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" Background="{DynamicResource GradientBrush1}" >
                            <Border CornerRadius="{TemplateBinding CornerRadius}" BorderThickness="0,1,0,0" BorderBrush="{DynamicResource TopBorderBrushLight}">
                                <ContentPresenter x:Name="contentPresenter" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource GradientBrush1_Highlight}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True"/>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource GradientBrush1_Highlight}"/> 
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#FFADADAD"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DeployRoundedButtonStyleToggle" TargetType="{x:Type local:RoundedButtonToggle}">
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Rectangle Margin="2" SnapsToDevicePixels="True" StrokeThickness="1" StrokeDashArray="1 2"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:RoundedButtonToggle}">
                    <Grid>
                        <Border  x:Name="border" BorderBrush="{DynamicResource BorderDark}" BorderThickness="0" CornerRadius="{TemplateBinding CornerRadius}" Background="Transparent">
                            <Border  CornerRadius="{TemplateBinding CornerRadius}" BorderThickness="0" BorderBrush="{DynamicResource TopBorderBrushLight}" Background="Transparent">
                                <ContentPresenter  Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource GradientBrush1_Highlight}"/>
                        </Trigger>-->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource DeployToggledBrush}"/>
                            <Setter Property="CornerRadius" TargetName="border" Value="8"/>
                            <Setter Property="BorderThickness" TargetName="border" Value="1"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#1A1A1A"/>

                        </Trigger>
                        <Trigger Property="IsEnabled" Value="True">
                            <Setter Property="Foreground" Value="#888"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.15"/>
                            <Setter Property="Foreground" Value="#999"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ContextMenu">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
        <Setter Property="HasDropShadow" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContextMenu">
                    <Border 
                        Name="Border"
                        Background="{StaticResource WindowBackgroundBrush}"
                        BorderBrush="{StaticResource ContextMenuBorderColor}"
                        BorderThickness="1" Opacity="1" >
                        <StackPanel IsItemsHost="True"
                            KeyboardNavigation.DirectionalNavigation="Contained" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="true">
                            <Setter TargetName="Border" Property="Padding" Value="0,0,0,0"/>               
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}"
       TargetType="Separator">
        <Setter Property="Height" Value="1"/>
        <Setter Property="Margin" Value="0,2,0,2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Separator">
                    <Border BorderBrush="#2F2F2F"
                            BorderThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TopLevelHeader Menu (tipo file, etc)-->
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="MenuItem">
        <Border Name="Border">
            <Grid>
                <ContentPresenter 
                    Margin="8,4,8,4" 
                    ContentSource="Header"
                    RecognizesAccessKey="True" />
                <Popup 
                    Name="Popup"
                    Placement="Bottom"
                    IsOpen="{TemplateBinding IsSubmenuOpen}"
                    AllowsTransparency="True" 
                    Focusable="False"
                    PopupAnimation="Fade">
                    <Border 
                        Name="SubmenuBorder"
                        SnapsToDevicePixels="True"
                        Background="{StaticResource WindowBackgroundBrush}"
                        Opacity="1"
                        BorderBrush="{StaticResource ContextMenuBorderColor}"
                        CornerRadius="0"
                        BorderThickness="1" >
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" >
                            
                        </StackPanel>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="Popup" Property="PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="#777"/>
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="0,0,0,0"/>
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,0,0,3"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    
    <!-- TopLevelItem Ainda não sei o que altera-->
    <!--<ControlTemplate x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" TargetType="MenuItem">
        <Border Name="Border">
            <Grid>
                <ContentPresenter 
                    Margin="6,3,6,3" 
                    ContentSource="Header"
                    RecognizesAccessKey="True" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{StaticResource NormalBrush}"/>
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground"
              Value="{StaticResource DisabledForegroundBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>-->

    <!-- SubmenuItem  Aqui é o estilo dos menu items normais-->
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="MenuItem">
        <Border Name="Border" Padding="1,2,1,2" Margin="0,0,0,0" ClipToBounds="True">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="13"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter Name="Icon"
                    Margin="6,0,6,0"
                    VerticalAlignment="Center"
                    ContentSource="Icon"/>
                <Border 
                    Name="Check"  
                    Width="13" Height="13" 
                    Visibility="Collapsed"
                    Margin="6,0,6,0" 
                    Background="{StaticResource NormalBrush}"
                    BorderThickness="1"
                    BorderBrush="#111">
                    <Path 
                        Name="CheckMark"
                        Width="7" Height="7" 
                        Visibility="Hidden" 
                        SnapsToDevicePixels="False" 
                        Stroke="{StaticResource GlyphBrush}"
                        StrokeThickness="2"
                        Data="M 0 0 L 7 7 M 0 7 L 7 0" />
                </Border>
                <ContentPresenter 
                    Name="HeaderHost"
                    Grid.Column="1"
                    ContentSource="Header"
                    RecognizesAccessKey="True"/>
                <TextBlock x:Name="InputGestureText"
                    Grid.Column="2"
                    Text="{TemplateBinding InputGestureText}"
                    Margin="0,0,0,0"
                    VerticalAlignment="Center"
                    DockPanel.Dock="Right" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsCheckable" Value="true">
                <Setter TargetName="Check" Property="Visibility" Value="Visible"/>
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <!--<Setter Property="Background" TargetName="Border" Value="#3399FF"/>-->
                <Setter Property="Background" TargetName="Border">
                    <Setter.Value>                  
                        <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                            <GradientStop Offset="0" Color="#7AA3E5"></GradientStop>
                            <GradientStop Offset="1" Color="#5680C1"></GradientStop>
                        </LinearGradientBrush>
                    </Setter.Value>              
                </Setter>
                <Setter Property="Opacity" TargetName="Border" Value="1"/>             
                <Setter Property="Foreground" Value="#222"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="false">
                <Setter Property="Foreground" Value="#CCC"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- SubmenuHeader Aqui é o caso do create, que contém outros menus dentro-->
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" TargetType="MenuItem">
        <Border Name="Border" Padding="0,1,0,1">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="13"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter 
                    Name="Icon"
                    Margin="6,0,6,0"
                    VerticalAlignment="Center"
                    ContentSource="Icon"/>
                <ContentPresenter 
                    Name="HeaderHost"
                    Grid.Column="1"
                    ContentSource="Header"
                    RecognizesAccessKey="True"/>
                <TextBlock x:Name="InputGestureText"
                    Grid.Column="2"
                    Text="{TemplateBinding InputGestureText}"
                    Margin="5,0,0,0"
                    VerticalAlignment="Center"
                    DockPanel.Dock="Right"/>
                <Path Name="arrow"
                    Grid.Column="3"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="M 0 0 L 0 7 L 4 3.5 Z" 
                    Fill="{StaticResource GlyphBrush}" />
                <Popup 
                    Name="Popup"
                    Placement="Right"
                    HorizontalOffset="-4" 
                    IsOpen="{TemplateBinding IsSubmenuOpen}"
                    AllowsTransparency="True" 
                    Focusable="False"
                    PopupAnimation="None"
                    >
                    <Border 
                        Name="SubmenuBorder"
                        SnapsToDevicePixels="True"
                        Background="{StaticResource WindowBackgroundBrush}"
                        BorderBrush="{StaticResource ContextMenuBorderColor}"
                        CornerRadius="0"
                        BorderThickness="1" >
                        <StackPanel  
                            IsItemsHost="True" 
                            KeyboardNavigation.DirectionalNavigation="Cycle"/>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <!--<Setter Property="Background" TargetName="Border" Value="#FFBDBDBD"/>-->
                <Setter Property="Background" TargetName="Border">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                            <GradientStop Offset="0" Color="#7AA3E5"></GradientStop>
                            <GradientStop Offset="1" Color="#5680C1"></GradientStop>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="Opacity" TargetName="Border" Value="1"/>
                <Setter Property="Fill" TargetName="arrow" Value="#222"/>
                <Setter Property="TextBlock.Foreground" TargetName="HeaderHost" Value="#222"/>
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="0"/>
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,0,0,0"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- MenuItem Style -->
    <Style x:Key="{x:Type MenuItem}" TargetType="MenuItem">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundGray}"/>
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template"
              Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}"/>
                <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template"
              Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template"
              Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Template"
              Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ScrollViewer}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <ScrollContentPresenter Grid.Column="0"/>

                        <Rectangle Grid.Column="1" Grid.Row="1" Fill="{StaticResource NormalBrush}" />

                        <ScrollBar Name="PART_VerticalScrollBar"
                        Value="{TemplateBinding VerticalOffset}"
                        Maximum="{TemplateBinding ScrollableHeight}"
                        ViewportSize="{TemplateBinding ViewportHeight}"
                        Grid.Column="1"
                        Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                        
                        <ScrollBar Name="PART_HorizontalScrollBar"
                        Orientation="Horizontal"
                        Grid.Row="1"
                        Grid.Column="0"
                        Value="{TemplateBinding HorizontalOffset}"
                        Maximum="{TemplateBinding ScrollableWidth}"
                        ViewportSize="{TemplateBinding ViewportWidth}"
                        Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Style and template for the button in the upper left corner of the DataGrid.-->
    <Style TargetType="{x:Type Button}"
       x:Key="{ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, 
  TypeInTargetAssembly={x:Type DataGrid}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <!--<sw:VisualStateManager.VisualStateGroups>
                            <sw:VisualStateGroup x:Name="CommonStates">
                                <sw:VisualState x:Name="Normal" />
                                <sw:VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                Storyboard.TargetProperty="(Shape.Fill).
                      (GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0"
                                         Value="{StaticResource ControlMouseOverColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </sw:VisualState>
                                <sw:VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                Storyboard.TargetProperty="(Shape.Fill).
                      (GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                            <EasingColorKeyFrame KeyTime="0"
                                         Value="{StaticResource ControlPressedColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </sw:VisualState>
                                <sw:VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"
                                                 Storyboard.TargetName="Arrow">
                                            <DiscreteObjectKeyFrame KeyTime="0"
                                            Value="{x:Static Visibility.Collapsed}" />
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </sw:VisualState>
                            </sw:VisualStateGroup>
                        </sw:VisualStateManager.VisualStateGroups>-->
                        <Rectangle x:Name="Border"
                     SnapsToDevicePixels="True">
                        </Rectangle>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Style and template for the DataGrid.-->
    <Style TargetType="{x:Type DataGrid}">
        <Setter Property="Foreground"
          Value="#999" />
        <Setter Property="BorderBrush" Value="#222"/>
        <Setter Property="BorderThickness"
          Value="0, 1, 0, 0" />
        <Setter Property="RowDetailsVisibilityMode"
          Value="VisibleWhenSelected" />
        <Setter Property="ScrollViewer.CanContentScroll"
          Value="true" />
        <Setter Property="ScrollViewer.PanningMode"
          Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled"
          Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGrid}">
                    <Border x:Name="border"
                SnapsToDevicePixels="True"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Padding="{TemplateBinding Padding}" Background="{DynamicResource BackgroundBrush}">
    
                        <sw:VisualStateManager.VisualStateGroups>
                            <sw:VisualStateGroup x:Name="CommonStates">
                                <sw:VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border"
                                                Storyboard.TargetProperty="(Panel.Background).
                      (SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0"
                                         Value="{DynamicResource ControlLightColor}" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </sw:VisualState>
                                <sw:VisualState x:Name="Normal" />
                            </sw:VisualStateGroup>
                        </sw:VisualStateManager.VisualStateGroups>
                        <ScrollViewer x:Name="DG_ScrollViewer"
                        Focusable="false"
                        Background="Black">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>

                                        <Button Focusable="false"
                          Command="{x:Static DataGrid.SelectAllCommand}"
                          Style="{DynamicResource {ComponentResourceKey 
                      ResourceId=DataGridSelectAllButtonStyle, 
                      TypeInTargetAssembly={x:Type DataGrid}}}"
                          Visibility="{Binding HeadersVisibility, 
                      ConverterParameter={x:Static DataGridHeadersVisibility.All}, 
                      Converter={x:Static DataGrid.HeadersVisibilityConverter}, 
                      RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                          Width="{Binding CellsPanelHorizontalOffset, 
                      RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />

                                        <DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter"
                                                  Grid.Column="1"
                                                  Visibility="{Binding HeadersVisibility, 
                      ConverterParameter={x:Static DataGridHeadersVisibility.Column}, 
                      Converter={x:Static DataGrid.HeadersVisibilityConverter}, 
                      RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />

                                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                                          Grid.ColumnSpan="2"
                                          Grid.Row="1"
                                          CanContentScroll="{TemplateBinding CanContentScroll}" />

                                        <ScrollBar x:Name="PART_VerticalScrollBar"
                             Grid.Column="2"
                             Grid.Row="1"
                             Orientation="Vertical"
                             ViewportSize="{TemplateBinding ViewportHeight}"
                             Maximum="{TemplateBinding ScrollableHeight}"
                             Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                             Value="{Binding VerticalOffset, Mode=OneWay, 
                      RelativeSource={RelativeSource TemplatedParent}}"/>

                                        <Grid Grid.Column="1"
                        Grid.Row="2">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, 
                          RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                                                <ColumnDefinition Width="*" />
                                            </Grid.ColumnDefinitions>

                                            <ScrollBar x:Name="PART_HorizontalScrollBar"
                               Grid.Column="1"
                               Orientation="Horizontal"
                               ViewportSize="{TemplateBinding ViewportWidth}"
                               Maximum="{TemplateBinding ScrollableWidth}"
                               Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                               Value="{Binding HorizontalOffset, Mode=OneWay, 
                        RelativeSource={RelativeSource TemplatedParent}}"/>
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsGrouping"
             Value="true">
                <Setter Property="ScrollViewer.CanContentScroll"
              Value="false" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Style and template for the DataGridCell.-->
    <Style TargetType="{x:Type DataGridCell}">
        <Setter Property="Template">
            
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <!--<ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="Yellow">
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>-->
                    <Border x:Name="border"
                           
                BorderBrush="Transparent"
                BorderThickness="0"
                Background="#222"
                SnapsToDevicePixels="True">
                        <sw:VisualStateManager.VisualStateGroups>
                            <sw:VisualStateGroup x:Name="FocusStates">
                                <sw:VisualState x:Name="Unfocused" />
                                <sw:VisualState x:Name="Focused" />
                            </sw:VisualStateGroup>
                            <sw:VisualStateGroup x:Name="CurrentStates">
                                <sw:VisualState x:Name="Regular" />
                                <sw:VisualState x:Name="Current">
                                    <Storyboard> 
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="border"
                                                Storyboard.TargetProperty="(Border.BorderBrush).
                      (SolidColorBrush.Color)">
                                            <EasingColorKeyFrame KeyTime="0"
                                         Value="Transparent" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                    </sw:VisualState>
                                </sw:VisualStateGroup>
                        </sw:VisualStateManager.VisualStateGroups>
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Style and template for the DataGridRow.-->
    <Style TargetType="{x:Type DataGridRow}">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}">
        </Setter>
        <Setter Property="SnapsToDevicePixels"
          Value="true" />
        <Setter Property="Validation.ErrorTemplate"
          Value="{x:Null}" />
        <Setter Property="ValidationErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <TextBlock 
                   Margin="2,0,0,0"
                   Text="!"
                   VerticalAlignment="Center" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRow}">
                    <Border x:Name="DGR_Border"
                BorderBrush="#222"
                BorderThickness="0"  
                       
                SnapsToDevicePixels="True" Background="{DynamicResource BackgroundBrush}">
                        <SelectiveScrollingGrid>
                            <SelectiveScrollingGrid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </SelectiveScrollingGrid.ColumnDefinitions>
                            <SelectiveScrollingGrid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </SelectiveScrollingGrid.RowDefinitions>
                            <DataGridCellsPresenter Grid.Column="1"
                                    ItemsPanel="{TemplateBinding ItemsPanel}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <DataGridDetailsPresenter Grid.Column="1"
                                      Grid.Row="1"
                                      Visibility="{TemplateBinding DetailsVisibility}"
                                      SelectiveScrollingGrid.SelectiveScrollingOrientation=
                "{Binding AreRowDetailsFrozen, 
                ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical},
                Converter={x:Static DataGrid.RowDetailsScrollingConverter}, 
                RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                            <DataGridRowHeader Grid.RowSpan="2"
                               SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical"
                               Visibility="{Binding HeadersVisibility, 
                ConverterParameter={x:Static DataGridHeadersVisibility.Row}, 
                Converter={x:Static DataGrid.HeadersVisibilityConverter}, 
                RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                        </SelectiveScrollingGrid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Style and template for the resize control on the DataGridRowHeader.-->
    <Style x:Key="RowHeaderGripperStyle"
       TargetType="{x:Type Thumb}">
        <Setter Property="Height"
          Value="8" />
        <Setter Property="Background"
          Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Cursor"
          Value="SizeNS" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="{TemplateBinding Background}"
                Padding="{TemplateBinding Padding}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <BooleanToVisibilityConverter x:Key="bool2VisibilityConverter" />

    <!--Style and template for the DataGridRowHeader.-->
    <Style TargetType="{x:Type DataGridRowHeader}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRowHeader}">
                    <Grid>
                        <sw:VisualStateManager.VisualStateGroups>
                            <!--This example does not specify an appearance for every
                state.  You can add storyboard to the states that are listed
                to change the appearance of the DataGridRowHeader when it is
                in a specific state.-->
                            <sw:VisualStateGroup x:Name="CommonStates">
                                <sw:VisualState x:Name="Normal" />
                                <sw:VisualState x:Name="Normal_CurrentRow" />
                                <sw:VisualState x:Name="Unfocused_EditingRow" />
                                <sw:VisualState x:Name="Normal_EditingRow" />
                                <sw:VisualState x:Name="MouseOver_CurrentRow" />
                                <sw:VisualState x:Name="MouseOver_Unfocused_EditingRow" />
                                <sw:VisualState x:Name="MouseOver_EditingRow" />
                                <sw:VisualState x:Name="MouseOver_Unfocused_Selected" />
                                <sw:VisualState x:Name="MouseOver_Selected" />
                                <sw:VisualState x:Name="MouseOver_Unfocused_CurrentRow_Selected" />
                                <sw:VisualState x:Name="MouseOver_CurrentRow_Selected" />
                                <sw:VisualState x:Name="Unfocused_Selected" />
                                <sw:VisualState x:Name="Unfocused_CurrentRow_Selected" />
                                <sw:VisualState x:Name="Normal_CurrentRow_Selected" />
                                <sw:VisualState x:Name="Normal_Selected" />
                            </sw:VisualStateGroup>
                        </sw:VisualStateManager.VisualStateGroups>
                        <Border x:Name="rowHeaderBorder"
                  Width="10"
                  BorderThickness="1" BorderBrush="{DynamicResource BackgroundBrush}">
                            
                          
                            <StackPanel Orientation="Horizontal">
                                <ContentPresenter VerticalAlignment="Center"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                <Control SnapsToDevicePixels="false"
                       Template="{Binding ValidationErrorTemplate, 
                  RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}"
                       Visibility="{Binding (Validation.HasError), 
                  Converter={StaticResource bool2VisibilityConverter}, 
                  RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}" />
                            </StackPanel>
                        </Border>

                        <Thumb x:Name="PART_TopHeaderGripper"
                 Style="{StaticResource RowHeaderGripperStyle}"
                 VerticalAlignment="Top" />
                        <Thumb x:Name="PART_BottomHeaderGripper"
                 Style="{StaticResource RowHeaderGripperStyle}"
                 VerticalAlignment="Bottom" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Style and template for the resize control on the DataGridColumnHeader.-->
    <Style x:Key="ColumnHeaderGripperStyle"
       TargetType="{x:Type Thumb}">
        <Setter Property="Width"
          Value="1" />
        <Setter Property="Background"
          Value="#1e1e1e"/>
        <Setter Property="Cursor"
          Value="SizeWE" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="{TemplateBinding Background}"
                Padding="{TemplateBinding Padding}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Style and template for the DataGridColumnHeader.-->
    <Style TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="VerticalContentAlignment"
          Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Grid >
                        <Border x:Name="columnHeaderBorder"
                  BorderThickness="0,0,0,1"
                  Padding="3,0,3,0" BorderBrush="#1e1e1e" Background="{DynamicResource GradientBrush1}" >
                            <!--<Border.Background>
                                <LinearGradientBrush EndPoint="0.5,1"
                                 StartPoint="0.5,0">
                                    <GradientStop Color="#333"
                            Offset="0" />
                                    <GradientStop Color="#222"
                            Offset="1" />
                                </LinearGradientBrush>
                            </Border.Background>-->

                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"  />
                        </Border>

                        <Thumb x:Name="PART_RightHeaderGripper"
                 HorizontalAlignment="Right"
                 Style="{StaticResource ColumnHeaderGripperStyle}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}">
            
        </Setter>
    </Style>

    <!--Style and template for the DataGridColumnHeadersPresenter.-->
    <Style TargetType="{x:Type DataGridColumnHeadersPresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeadersPresenter}">
                    <Grid>
                        <DataGridColumnHeader x:Name="PART_FillerColumnHeader"
                                IsHitTestVisible="False" />
                        <ItemsPresenter />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Color x:Key="ControlLightColor">#585858</Color>
        
    <Color x:Key="ControlMediumColor">#585858</Color>
        
    <Color x:Key="ControlDarkColor">#FF211AA9</Color>
    <Color x:Key="DatagridCurrentCellBorderColor">#444</Color>
    <Color x:Key="ContentAreaColorLight">#FFC5CBF9</Color>
    <Color x:Key="ContentAreaColorDark">#FF7381F9</Color>
    <Color x:Key="ControlMouseOverColor">#FF3843C4</Color>
    <Color x:Key="ControlPressedColor">#FF211AA9</Color>
        

    <!--Expander style-->
    <ControlTemplate x:Key="ExpanderToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Rectangle Margin="0,0,0,0" x:Name="Rectangle" Fill="Transparent" />
            <Path HorizontalAlignment="Center" x:Name="Up_Arrow" VerticalAlignment="Center" Fill="#777" Data="M 0 0 L 4 4 L 8 0 Z" RenderTransformOrigin="0.5,0.5">
                <Path.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform ScaleX="1" ScaleY="1" />
                        <SkewTransform AngleX="0" AngleY="0" />
                        <RotateTransform Angle="-90" />
                        <TranslateTransform X="0" Y="0" />
                    </TransformGroup>
                </Path.RenderTransform>
            </Path>
            <Path Visibility="Collapsed" HorizontalAlignment="Center" x:Name="Down_Arrow" VerticalAlignment="Center" Fill="#777" Data="M 0 4 L 4 0 L 8 4 Z" RenderTransformOrigin="0.5,0.5">
                <Path.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform ScaleX="1" ScaleY="1" />
                        <SkewTransform AngleX="0" AngleY="0" />
                        <RotateTransform Angle="135" />
                        <TranslateTransform X="0" Y="0" />
                    </TransformGroup>
                </Path.RenderTransform>
            </Path>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" Value="Visible" TargetName="Down_Arrow" />
                <Setter Property="Visibility" Value="Collapsed" TargetName="Up_Arrow" />
                <Setter Property="OpacityMask" TargetName="Down_Arrow" Value="#FF000000" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Cursor" Value="Hand"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>



    <Style x:Key="ExpanderStyle" TargetType="{x:Type Expander}">
        <Setter Property="Padding" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundGray}"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" x:Name="ContentRow" />
                        </Grid.RowDefinitions>
                        <Border x:Name="Border" Background="{DynamicResource PanelBackground}" BorderBrush="#FFF0F0F0">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="20" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <ToggleButton Template="{StaticResource ExpanderToggleButton}" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" OverridesDefaultStyle="True" />
                                <ContentPresenter Grid.Column="1" Margin="1" RecognizesAccessKey="True" ContentSource="Header" TextElement.FontWeight="Bold" />
                            </Grid>
                        </Border>
                        <Border Visibility="Collapsed" Grid.Row="1" x:Name="ExpandSite" Background="{DynamicResource PanelBackground}" Padding="10 0 0 0">
                            <Border Background="Transparent" BorderThickness="0" Margin="0" Padding="0" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="false" />
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="ExpandSite" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderStyleNoPadding" TargetType="{x:Type Expander}">
        <Setter Property="Padding" Value="0" />
        <Setter Property="Foreground" Value="#999"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="20" />
                            <RowDefinition Height="*" x:Name="ContentRow" />
                        </Grid.RowDefinitions>
                        <Border x:Name="Border" Background="{DynamicResource GradientBrush1}" BorderBrush="#FFF0F0F0">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="15" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <ToggleButton Template="{StaticResource ExpanderToggleButton}" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" OverridesDefaultStyle="True" />
                                <ContentPresenter  VerticalAlignment="Center" Grid.Column="1" Margin="1" RecognizesAccessKey="True" ContentSource="Header" />
                            </Grid>
                        </Border>
                        <Border Visibility="Collapsed" Grid.Row="1" x:Name="ExpandSite" Background="{DynamicResource PanelBackground}" Padding="0 0 0 0">
                            <Border Background="Transparent" BorderThickness="0" Margin="0" Padding="0" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="false" />
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="ExpandSite" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderStyleNoPaddingScroll" TargetType="{x:Type Expander}">
        <Setter Property="Padding" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundGray}"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" x:Name="ContentRow" />
                        </Grid.RowDefinitions>
                        <Border x:Name="Border" Background="{DynamicResource PanelBackground}" BorderBrush="#FFF0F0F0">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="20" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <ToggleButton Template="{StaticResource ExpanderToggleButton}" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" OverridesDefaultStyle="True" />
                                <ContentPresenter Grid.Column="1" Margin="1" RecognizesAccessKey="True" ContentSource="Header" TextElement.FontWeight="Bold" />
                            </Grid>
                        </Border>
                        <Border Visibility="Collapsed" Grid.Row="1" x:Name="ExpandSite" Background="{DynamicResource PanelBackground}" Padding="0 0 0 0">
                            <Border Background="Transparent" BorderThickness="1" Margin="0" Padding="0" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                                <ScrollViewer VerticalScrollBarVisibility="Visible">
                                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Focusable="false" />
                                </ScrollViewer>

                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="ExpandSite" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PropertyExpanderStyle" TargetType="{x:Type Expander}">
        <Setter Property="Padding" Value="10 0 0 0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid>
                        <Border Visibility="Collapsed" Grid.Row="1" x:Name="ExpandSite" Padding="0 0 0 0">
                            <Border BorderThickness="0" Margin="0" Padding="0" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
												      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
												      Focusable="false"  />
                            </Border>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="ExpandSite" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


</ResourceDictionary>