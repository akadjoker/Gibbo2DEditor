<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<!--Gibbo Tutorial-->
<Tutorial>
  <Info>
    <Title>Components Basis</Title>
    <Author>Gibbo2D Team</Author>
    <Description>In this tutorial, our first Game Scene is created.</Description>
    <Category>Easy</Category>
    <Image>4_add_component_physics_options_collision.png</Image>
  </Info>
  <Pages>
    <Page Title="Startup - New Project">
      <Image>4_startup_new_project.png</Image>
      <Description>In this tutorial we'll focus on creating a simple Game Scene. 
You can download the used resources here: http://dragon-scale-studios.com/archives/Content_4th_Tutorial.rar
Along the way we will introduce one of the most vital features of Gibbo - Components (based on Unity's System). It’s highly recommended to start a new project in order to follow this tutorial. In case that it’s your first time opening the Engine, click in the New Project button placed at the Bottom Left corner of the Startup Window.</Description>
    </Page>
    <Page Title="File Menu - New Project">
      <Image>4_file_new_project.png</Image>
      <Description>However, if you’ve ever opened Gibbo and checked Load Last Project option in the Settings, you’ll need to use the File Menu at the top and choose New Project.</Description>
    </Page>
    <Page Title="What to Add">
      <Image>4_projects_explorer_create_2options.png</Image>
      <Description>As shown in previous tutorials, the Project’s Explorer panel shows you the Root of your opened project. As such, you can Add scenes or scripts by using it.</Description>
    </Page>
    <Page Title="Creating a Scene">
      <Image>4_add_new_object_window.png</Image>
      <Description>Let’s start by creating a fresh Scene to our project – to do so, right mouse click in the Scene's folder and Create > Game Scene. You don’t need to do it specifically in this folder, but organization is very important.
</Description>
  	</Page>
  	<Page Title="Renaming a Scene">
      <Image>4_rename_game_scene.png</Image>
      <Description>After creating a Scene, you still need to double click on it in order to open it. Hint: It's a good idea to rename the Scene accordingly.</Description>
  	</Page>
  	<Page Title="Add an object to the Scene">
      <Image>4_add_new_object_window.png</Image>
      <Description>You can now notice that the message No Scene in memory is not shown anymore at the Scene’s Hierarchy panel. In this panel you’re supposed to add Game Objects.
Note that their hierarchy does matter as shown below:
	If you add a Game object to another one, the latest will be its child. So on, so forth;
	Moving a parent object, will also move its children;
	The higher an Object is in the Hierarchy, the higher it will be in the Rendering order. Beware of this rendering order. It could, for example, cause some Game Objects to go missing from the Scene because they are too low in the Rendering order, and are therefore "covered" by Objects above them.
There are several and distinct Game Objects you can use in the scene.
The Empty object can be used as a container - it's not the only function.
Think of it like an invisible layer, whose children are grouped inside and move along with it.
Start by adding one of those in the Scene - name it Container. In order to do that, either right mouse click in a Scene’s Hierarchy Object or press the Add New button at its top.</Description>
  	</Page>
  	<Page Title="Toggle Visibility">
      <Image>4_toggle_visibility_icon_Scene_Hierarchy.png</Image>
      <Description>Hint: Clicking on the Game's Object left icon, will toggle the correspondent object and its children visibility.</Description>
  	</Page>
  	<Page Title="Add From Folder">
      <Image>4_AddFromFolder_ProjectExplorer_Option.png</Image>
      <Description>You might be thinking: "What can we possibly add to the scene since we have no pictures yet?"
That’s easily solved – just place some Pictures in the Content folder. You can do that by right mouse clicking in the folder and choosing Add From Folder.</Description>
  	</Page>
  	<Page Title="Windows Explorer">
      <Image>4_content_windows_explorer.png</Image>
      <Description>Alternatively, if you've downloaded the resources for this tutorial, just extract them directly to the Content folder using your Archiver and Windows Explorer.
Hint: By default Gibbo projects are placed in a Gibbo folder inside your Documents library.
You will find a folder matching the name of your project there.
Above's a sample screenshot of the project resources extracted correctly to Windows Explorer.</Description>
  	</Page>
  	<Page Title="Real Time Refresh">
      <Image>4_resources_real_time_project_explorer.png</Image>
      <Description>When added, they should appear automatically in the Project’s Explorer since it refreshes in real-time. </Description>
  	</Page>
  	<Page Title="Add Sprite Objects">
      <Image>4_add_to_selected_option.png</Image>
      <Description>To actually Add them to a Scene, create Sprite Objects (inside the container - you can check the Add to Selected option).
Note: "Add to selected" is used to add your new item as a child of your selection. If you need to add it to the root, be sure to uncheck this.
Also note that drag and drop controls work in the Hierarchy view. So it is easy to re-order items if you should make a mistake.</Description>
  	</Page>
  	<Page Title="Image Path Property">
      <Image>4_image_path_property.png</Image>
      <Description>If you select it in the Hierarchy by clicking on it or by using Selection tool(Q) in the Scene's View, the Inspector panel will show its default properties – which you can also change in real-time.
Image Path, one of its properties, automatically opens a Picture in the Scene’s View panel based on the given relative path.</Description>
  	</Page>
  	<Page Title="Paste Relative Path">
      <Image>4_image_path_complete.png</Image>
      <Description>Finally, you can paste(Ctrl+V) inside the box of the property mentioned above. The picture should now show up in Scene's View panel if done correctly.</Description>
  	</Page>
  	<Page Title="Order Explanation">
      <Image>4_scene_hierarchy_complete.png</Image>
      <Description>After adding the background, add few options (New Game and so on) using more Sprite Objects.
After naming the added objects accordingly - it's a good practise to do so - fill their Image Path property, using the method mentioned earlier.
There are three possible situations after adding those objects (inside the Container), which affect their dependency and behaviour:
    The options were added below the background - they shouldn't be appearing (they would literally be below the background) in the Scene's View panel;
    The options were added inside the background - they should appear and depend on their parent;
    The options were added above the background - they should appear and be independent from the background.
It should look more or less like the above picture.</Description>
  	</Page>
  	<Page Title="Attaching a Component">
      <Image>4_add_component_physics_options_collision.png</Image>
      <Description>How about the options' functions? How can we control the objects behaviour?
That's exacly where Components enter. A Component can be understood like an object's attached behaviour or a literal Script.
Say you want to program the options in order to handle certain Mouse events - Mouse Click for instance.
In order to handle that, lets add Bodies to the options to detect collisions as shown below. Be sure to toggle the Collision Visibility!</Description>
  	</Page>
  	<Page Title="Body Properties">
      <Image>4_rectangle_body_inspector.png</Image>
      <Description>As you might've noticed, the default body type is Dynamic but let's change it to Static, so no forces are applied (such as Gravity) - more regarding this subject later.
Think of the bodies as being Collision Areas for now - be sure to adjust the area's size accordingly, by also using the Inspector Panel.</Description>
  	</Page>
  	<Page Title="Creating a New Folder">
      <Image>4_create_folder_projects_explorer.png</Image>
      <Description>Now that the Collision Areas were added to all of the options (be sure to add a body per option), we're now able to control their behaviour in the scene.
Firstly, create a new folder in the Project's Explorer and name it Scripts.</Description>
  	</Page>
  	<Page Title="Creating a New Script">
      <Image>4_create_script_projects_explorer.png</Image>
      <Description>In this folder, you should create every single script you want to use (you can actually split them in different categories - matter of taste).</Description>
  	</Page>
  	<Page Title="Script">
      <Image>4_lime_script_OnMouseUp_Only.png</Image>
      <Description>This tutorial just shows a very basic but important step, using the same script to all of the options, but knowing exactly which of them was clicked. Double click the newly created script - Lime Scripting Editor (or any other chosen Editor in the Settings) should popup with already some lines. In the picture above, you can notice the override to the OnMouseUp Event. An Event is triggered when some condition is satisfied, allowing you to actually choose when things should happen. This, in particular, is triggered when the a mouse button is freed (after clicking).</Description>
  	</Page>
  	<Page Title="Tags">
      <Image>4_lime_script_variable_tag.png</Image>
      <Description>Furthermore, you can see a string variable which stores the sender's tag. What's a Tag? Tag is an Object's attached property, which allows you to store any type of variables. Note that you can access the object that is using this Component with Transform.GameObject.</Description>
  	</Page>
  	<Page Title="Comparing the clicked Tag">
      <Image>4_lime_script_switch.png</Image>
      <Description>After that, there's a switch control that compares the tag sent to that event with all those cases below. If none of them matches, the default case is used.</Description>
  	</Page>
  	<Page Title="Tag Property">
      <Image>4_newgame_tag_inspector.png</Image>
      <Description>You might - or should - be thinking how we set that Tag in the objects, so we know how to compare properly in the cases. By selecting any object in the Scene's View, the Inspector Panel will shows its properties - one of them is the Tag. In this case, you should set New Game's Tag to newgame so you can compare it properly in the Script! Do the same thing to the other options (set a different Tag, unless you want the same effect to be happening). 
      </Description>
  	</Page>
  	<Page Title="Attaching our Component">
      <Image>4_add_component_script.png</Image>
      <Description>In that script, there're also output requests which can be seen in the debug console. Remember that there's always the possibility to enable or disable it in the Settings (shown in previous tutorials). If you debug the project, nothing will happen when you click those options. Why would that happen? The reason is that we didn't reference which Objects should use that Component. To do that, simply right mouse click in the objects you want to have that functionality and Add Component > Scripts > NameOfTheScript.cs.</Description>
  	</Page>
  	<Page Title="Component Overview">
      <Image>4_Inspector_Component_Category_Trash_Icon.png</Image>
      <Description>There's something else to note. When you Add a Component to an object, its Inspector also changes - a new category is added titled with the Component's name.
If you want to delete a Component, you can click in the respectively Trash icon in the Inspector.</Description>
  	</Page>
  	<Page Title="Compile">
      <Image>4_compile.png</Image>
      <Description>When you add the Created Component to all the Scene's Intro options, compile and debug the project. Note that if you do not Compile the project, the Script changes won't take any effect.</Description>
  	</Page>
  	<Page Title="Result">
      <Image>4_output_collision_newgame.png</Image>
      <Description>Exactly, if done correctly, the console window should now give you the information whether a specific option was clicked or not. You can now try to enhance the options, by giving them some movement for example (approached in a future tutorial as well).</Description>
  	</Page>
  </Pages>
</Tutorial>